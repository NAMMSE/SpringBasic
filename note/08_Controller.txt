08_Controller.txt
0804

# Spring Controller

 - MVC 패턴 중 Controller에 해당하는 부분이다
 - 컴포넌트이기 때문에 Spring Context에 의해 자동으로 수거된 후 필요할 때 호출된다
 - GET/POST 등 여러 메서드에 관한 처리도 어노테이션으로 쉽게 구현할 수 있다
 
 @Controller
 
  - 해당 클래스를 MVC 패턴의 컨트롤러 역할을 하는 컴포넌트라고 표시한다
  - 스프링이 자동으로 수집해간다
  
 @RequestMapping(value="", method="")
 
  - 사용자의 요청 URI와 해당 컴포넌트 또는 메서드를 매핑시키는 어노테이션
  - 클래스 위에 쓰거나 또는 메서드 위에 사용한다
  - value  : 요청 URI 설정
  - method : 요청 방식 설정
  
 @GetMapping(value="")
 
  - @RequestMapping(value="uri", REtuestMethod.GET)을 생략한 어노테이션
  
 @PostMapping(value="")
 
  - @RequestMapping(value="uri", REtuestMethod.POST)을 생략한 어노테이션
  
 # 컨트롤러의 파라미터 자동 수집 기능
 
  - 컨트롤러 매개변수에서 자바빈 스타일의 데이터 클래스를 사용한다면 데이터 클래스 필드의 이름과 파라미터의 이름이 일치할 때 자동으로 바인딩한다.
  	바인딩 : (해당 인스턴스의 내용을 자동으로 채움)
  - 데이터의 타입도 알아서 해당 데이터 클래스 필드의 타입으로 캐스팅된다.
  - 바인딩이 성공적으로 이루어졌다면 자동으로 어트리뷰트에도 추가된다.
    (뷰 페이지에서 값을 바로 활용할 수 있다)
  - 매개변수의 이름만 같아도 바인딩이 가능하다. 이름만 같으면 자동으로 어트리뷰트 추가되지 않고 @ModelAttribute를 사용해줘야 어트리뷰트에 추가가된다
    (웬만하면 데이터 클래스 사용하는게 좋다)
  
 @ModelAttribute("paramName")
 
  - 매개변수에 해당 파라미터를 바인딩 할 때 사용한다.
  - 바인딩에 성공한 파라미터는 어트리뷰트에 자동으로 추가되어 있다.
  - 파라미터 이름과 매개변수 이름을 다르게 설정해도 된다.
  - 타입도 알아서 맞춰준다. getparameter는 무조건 String을 반환하는데 알아서 타입을 맞춰준다
  
 # 컨트롤러의 리턴 타입
 
  1. view를 찾는 리턴 타입
  
   - String : 리턴한 문자열에 /WEB-INF/views/와 .jsp를 더해 알맞은 view를 찾는다 (해당 설정 내용은 servlet-context에 있음)
   - void : 접속한 URI를 그대로 사용해 view를 찾는다.
   			(/WEB-INF/views/ + URI + .jsp)
   			
  2. view를 찾지 않는 리턴 타입
  
   - 자바빈 객체(데이터 클래스)를 리턴 : 요청을 보낸 클라이언트에게 데이터를 바로 응답한다. (.json or .xml)
   - Model : 요청을 보낸 클라이언트에게 모델에 들어있는 내용을 바로 응답한다.
   - ResponseEntity : 개발자가 직접 원하는 형태의 응답을 생성하여 응답한다.
   					  (주로 원하는 오류를 보낼 때 사용) 
  	