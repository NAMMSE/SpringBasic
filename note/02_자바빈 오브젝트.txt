02_자바빈 오브젝트.txt
0802 수업

# JavaBean Object

 - 데이터 클래스를 만들 때 자주 사용하는 형태의 객체를 의마한다
 - 필드 값의 접근 제어자는 private이어야 한다
 - 필드 값에 대한 접근은 Getter/Setter를 통해 이루어져야 한다
 - 기본 생성자가 반드시 존재해야 한다
 
 * 자바빈 객체 스타일을 지켜서 클래스를 만들어 사용하면 다양한 자바 프레임워크, API, 라이브러리 등에서 문제를 일이크지 않고 동작한다
 
   ex) JSP의 EL ${apple.size } (이게 사실은 getSize()를 호출한 것 Getter/Setter를 사용했을 것이라 가정하고 만든 것이기 때문에 규칙을 지켜야함) , Spring의 Bean 등
   
# IOC (Inversion of Control)
 
 - 제어의 역전
 - 기존 Java 프로그래밍을 할 때에는 사용자가 객체를 생성하고 인스턴스를 만들고 조작하여 모든 작업을 사용자가 제어하는 구조였다
   예를 들어 A 객체에서 B 객체의 메서드를 사용하고 싶을 경우 A 객체 내부에 B 객체를 생성하여 사용했다
 - 하지만 IOC가 적용된 경우에는 객체의 생성을 특별한 관리 주체에게 위임한다. 이 경우 사용자는 객체를 직접 생성하지 않고 객체의 생명주기를 컨트롤 하는 것은 다른 주체가 된다.
   이렇게 사용자의 제어권을 다른 주체에게 넘기는 것을 제어의 역전(IOC)라고 한다.
 - Java 프로그래밍을 할 때는 class를 만들고 new로 생성자를 만들어 사용했지만 spring에서는 스프링에 의해 관리당하는 객체를 사용하고 그 객체를 Bean이라고 부른다.
   
   
 