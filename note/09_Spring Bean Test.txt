09_Spring Bean Test.txt
0805

# spring context에 등록된 빈 테스트하기

* maven에서 spring testcontext framework 검색 5.2.22realese 복사 pom 카피

 - 서버를 실행하지 않으면 spring-context가 생성되지 않는다.
 - 당연히 bean들도 로드하지 않는다.
 - JUnit 테스트를 진행할 때는 서버가 실행되지 않으므로 이미 존재하는 설정들을 이용해 테스트용 빈을 생성해야 한다.
 
# spring-test

	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-test</artifactId>
		<version>${org.springframework-version}</version>
		<scope>test</scope>
	</dependency>
	
# JUnit 테스트에 spring-context 불러 사용하기

 - @RunWith(SpringJUnit4ClassRunner.class) // 이거 개념뭔지 확인
   @ContextConfiguration({ 	// 이것도
				"file:src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml", // 자동완성 된다
				"file:src/main/webapp/WEB-INF/spring/root-context.xml"
				})
				
# spring controller Test

 - 컨트롤러는 요청을 받으면 다음으로 가야하는 뷰를 리턴해주는 역할을 한다.
 - 테스트를 진행하기 위해서는 가짜 요청을 만들어 보내야 한다.
 
 스프링에서 말하는 "애플리케이션 컨텍스트"는 스프링이 관리하는 빈들이 담겨 있는 컨테이너라고 생각하시면 됩니다. 
 스프링 안에는 여러 종류의 애플리케이션 컨텍스트 구현체가 있는데, ApplicationContext라는 인터페이스를 구현한 객체들이 다 이 애플리케이션 컨텍스트입니다. 
 웹 애플리케이션 컨텍스트는 ApplicationContext를 확장한 WebApplicationContext 인터페이스의 구현체를 말합니다. 
 WebApplicationContext는 ApplicationContext에 getServletContext() 메서드가 추가된 인터페이스입니다. 
 이 메서드를 호출하면 서블릿 컨텍스트를 반환됩니다. 
 결국 웹 애플리케이션 컨텍스트는 스프링 애플리케이션 컨텍스트의 변종이면서 서블릿 컨텍스트와 연관 관계에 있다는 정도로 정리가 됩니다. 
 이 메서드가 추가됨과 동시에 서블릿 컨텍스트를 이용한 몇가지 빈 생애 주기 스코프(애플리케이션, 리퀘스트, 세션 등)가 추가되기도 합니다.