01_스프링 프레임워크.txt
0802 수업


# 프레임워크

 - 프로젝트 개발에 효율적인 구조를 미리 만들어 놓은 것
 - 개발자는 이미 완성된 효율적인 구조에 빈칸을 채우는 형식으로 개발을 진행하게 된다
 - 어느정도 수준 이상의 품질이 보장된다는 장점이 있다
 - 효율적인 프로젝트 구조로 인해 개발 기간이 많이 단축된다
 
 
# 스프링 프레임워크

 - 자바를 활용해 JSP 서버 프로그램을 더욱 쉽고 효율적으로 개발하기 위한 프레임워크
 - 다양한 자바 디자인 패턴이 미리 적용되어 있기 때문에 디자인 패턴에 대해 잘 모르는 초급 개발자도
   효율적인 방식으로 프로젝트에 참여할 수 있다.

# 스프링의 특징

 1. POJO (Plain Old Java Object) 
 
  - 스프링 개발자들은 JSP 문법을 매우 싫어한다
  - JSP의 새로운 여러 문법들은 모두 순수 JAVA로 대체할 수 있기 때문에 순수 자바 활용을 선호한다
  - 백엔드 관련 개발에는 JAVA만 사용하도록 노력하고, 프론트엔드 관련 개발에는 JSP/JSTL 등 별도의 프론트엔드 API룰 활용한다
  - 최대한 자바만 사용하여 익숙하지 않은 문법 사용을 최소화한다.
 
 2. 의존성 주입
 
  - 프로젝트 규모가 커지면 커질수록 생성자를 사용하는 것 자체가 문제가 된다
    ex : if, new 등 디자인 패턴상 유지보수에 좋지 않은 기본 문법들이 있다
  - 스프링 프레임워크는 프로젝트 내의 모든 생성자 사용을 제거하기 위해서
    인스턴스가 필요한 곳에 등록된 클래스의 인스턴스를 자동으로 주입하는 방식을 사용한다
  - 생성자를 제거하면 코드의 결합도가 낮아지는 효과가 있다
  
  
# 스프링 MVC 프로젝트의 기본 구조

 - src/main/java : 메인 자바 코드를 작성하는 곳
 - src/main resources : 메인 자바 코드를 실행하기 위한 자원들을 저장하는 곳
 - src/test/java : 자바 테스트 코드를 작성하는 곳
 - src/test/resources : 자바 테스트 코드를 실행하기 위한 자원들을 저장하는 곳
 - /webapp/resources : 웹에서 사용할 자원들(css, js, image 등)을 저장하는 곳 
 - /webapp/WEB-INF/views/ : 사용자에게 보여지는 뷰 페이지들을 모아놓은 곳
 - /webapp/WEB-INF/spring/root-context.xml : 프로젝트 전역에서 접근할 수 있는 자원을 등록하는 곳 
 - /webapp/WEB-INF/spring/appServlet/servlet-context.xml : 스프링의 프론트 컨트롤러(DispatcherServlet)에서 사용할 자원을 등록하는 곳
 - /webapp/WEB-INF/web.xml : 웹 서버 설정 파일
 - Maven Dependencies : Maven이 자동으로 관리해주는 라이브러리 목록
 - pom.xml : Maven 설정 파일